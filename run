#!/usr/bin/env python3

import argparse
import collections
import random
import string
import sys

from simulation import Simulation
from scheduler import Delivery
from scheduler1 import Scheduler1


def parse_args():
    """
    Parses arguments given by the user in the command line.
    """
    description = (
        'Runs a simulation for the deliveries challenge.')
    parser = argparse.ArgumentParser(description= description)
    parser.add_argument(
        'drones', type=int, help='Number of drones')
    parser.add_argument(
        'cyclists', type=int, help='Number of cyclists')
    parser.add_argument(
        'scheduler', help='Scheduling strategy to be used')
    return parser.parse_args()


def generate_random_id():
    """
    Generate a random ID of the from '[AA-ZZ][0000-9999]'
    """
    return ''.join(
        random.choices(string.ascii_uppercase, k=2) +
        random.choices(string.digits, k=4))

class Scheduler(object):
    def __init__(self):
        self.__drones_routes = (
            collections.deque(
                (((5, 4), 'product0'), )),
            collections.deque(
                (((5, 4), 'product1'), )),
            collections.deque(
                (((5, 4), 'product2'), )),
            collections.deque(
                (((15, 9), 'product3'), )),
            collections.deque(
                (((6, 7), 'product4'), )),
        )
        self.__drones_routes_idx = 0

    def get_route(self):
        if self.__drones_routes_idx < len(self.__drones_routes):
            route = self.__drones_routes[self.__drones_routes_idx]
            self.__drones_routes_idx += 1
            return route
        return None

Delivery = collections.namedtuple('Delivery', 'packages destination')


def read_deliveries():
    """
    """
    n = int(sys.stdin.readline())
    deliveries = []
    for _ in range(n):
        line = sys.stdin.readline()
        line = line.strip()
        tokens = line.split()
        packages = tokens[1:1 + int(tokens[0])]
        destination = (int(tokens[-2]), int(tokens[-1]))
        deliveries.append(Delivery(packages, destination))
    return deliveries


def read_weights():
    """
    """
    n = int(sys.stdin.readline())
    weights = {}
    for _ in range(n):
        line = sys.stdin.readline()
        line = line.strip()
        product, weight = line.split()
        weights[product] = float(weight)
    return weights


def assert_all_packages_have_weight(deliveries, weights):
    """
    """
    for delivery in deliveries:
        for product in delivery.packages:
            if product not in weights:
                msg = 'ERROR: All products must have a weight: {}'
                print(msg.format(package))
                sys.exit(1)


def main():
    args = parse_args()
    drones = [generate_random_id() for _ in range(args.drones)]
    cyclists = [generate_random_id() for _ in range(args.cyclists)]
    deliveries = read_deliveries()
    weights = read_weights()
    assert_all_packages_have_weight(deliveries, weights)
    scheduler_module = __import__(args.scheduler)
    scheduler_class = getattr(scheduler_module, args.scheduler.capitalize())
    scheduler = scheduler_class(deliveries, weights)
    simulation = Simulation(deliveries, drones, cyclists, scheduler)
    simulation.start()


if __name__ == '__main__':
    main()
